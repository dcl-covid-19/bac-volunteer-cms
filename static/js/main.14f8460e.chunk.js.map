{"version":3,"sources":["components/table/TablePaginationActions.tsx","util/Resource.ts","components/table/ResourceForm.tsx","components/table/AddEditDialog.tsx","components/table/NewResourceButton.tsx","components/table/Search.tsx","components/table/TableToolbar.tsx","components/table/EditButton.tsx","components/table/Columns.tsx","components/table/ErrorCell.tsx","components/table/Table.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexShrink","marginLeft","spacing","TablePaginationActions","props","classes","useTheme","count","page","rowsPerPage","onChangePage","maxPages","Math","max","ceil","className","IconButton","onClick","event","disabled","aria-label","direction","countyNames","options","counties","Object","keys","resourceTypes","allFieldsEqualBool","resource","fields","value","reduce","accumulator","field","fieldErrors","freeze","name","formControl","margin","ResourceForm","setResource","errors","handleChange","target","handleChecked","checked","FormControl","required","error","provider_name","variant","fullWidth","InputLabel","htmlFor","OutlinedInput","id","onChange","label","component","FormLabel","RadioGroup","map","option","FormControlLabel","control","Radio","color","key","FormGroup","row","names","Checkbox","makeCheckboxes","indeterminate","newValues","acc","setAllFields","address","bob","AddEditDialog","title","description","isOpen","setOpen","submitHandler","hasOwnProperty","getResourceErrors","hasErrors","prop","handleClose","Dialog","maxWidth","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","initialResource","NewResourceButton","newResourceHandler","useState","React","Tooltip","Search","onSearchChange","globalFilter","TextField","placeholder","InputProps","startAdornment","InputAdornment","position","fontSize","endAdornment","inputProps","useToolbarStyles","paddingLeft","paddingRight","highlight","palette","type","secondary","main","backgroundColor","lighten","light","text","primary","dark","flex","TableToolbar","numSelected","setGlobalFilter","deleteHandler","selected","Toolbar","clsx","Typography","EditButton","originalResource","updateRow","rowIndex","actionsColumn","Header","getToggleAllRowsSelectedProps","Cell","style","display","flexDirection","getToggleRowSelectedProps","original","index","dataColumns","accessor","ErrorCell","column","Table","data","setData","columns","defaultColumn","useTable","useGlobalFilter","useSortBy","usePagination","useRowSelect","hooks","allColumns","push","getTableProps","headerGroups","prepareRow","rows","gotoPage","setPageSize","state","pageIndex","pageSize","selectedRowIds","length","concat","array","indexs","newData","x","parseInt","filter","_","i","includes","TableContainer","stickyHeader","size","TableHead","headerGroup","TableRow","getHeaderGroupProps","headers","TableCell","getHeaderProps","getSortByToggleProps","render","TableSortLabel","active","isSorted","isSortedDesc","TableBody","getRowProps","cells","cell","getCellProps","TableFooter","TablePagination","rowsPerPageOptions","SelectProps","native","newPage","onChangeRowsPerPage","Number","ActionsComponent","App","results","useMemo","Box","height","width","old","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.14f8460e.chunk.js","sourcesContent":["import React from 'react';\n\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexShrink: 0,\n            marginLeft: theme.spacing(2.5),\n        },\n    }),\n);\n\ninterface TablePaginationActionsProps {\n    count: number;\n    page: number;\n    rowsPerPage: number;\n    onChangePage: (event: React.MouseEvent<HTMLButtonElement>, newPage: number) => void;\n};\n\nfunction TablePaginationActions(props: TablePaginationActionsProps) {\n    const classes = useStyles();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onChangePage } = props;\n\n    const maxPages = Math.max(0, Math.ceil(count / rowsPerPage) - 1);\n    const handleFirstPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => onChangePage(event, 0);\n    const handleBackButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => onChangePage(event, page - 1);\n    const handleNextButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => onChangePage(event, page + 1);\n    const handleLastPageButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => onChangePage(event, maxPages);\n\n    return (\n        <div className={classes.root}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= maxPages}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= maxPages}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nexport default TablePaginationActions;\n","import * as options from 'constants/Options.json';\n\nconst countyNames = options.county;\nconst counties = Object.keys(countyNames);\nconst resourceTypes: any = options.resource;\n\nexport const coerceToOptions = (value: string, options: string[]) => (options.includes(value) ? value: \"\");\nexport const allFieldsEqualBool = (resource: any, fields: any[], value: boolean) => fields.reduce(\n    (accumulator: boolean, field: any) => (accumulator && (!resource[field] !== value)),\n    true\n);\nexport const setAllFields = (resource: any, setResource: (resource: any) => void, fields: any[], value: any) => {\n    const newValues = fields.reduce((acc: any, field: any) => ({...acc, [field]: value}), {});\n    setResource({ ...resource, ...newValues });\n};\n\nexport const fieldErrors: any = Object.freeze({\n    'provider_name': (name: string) => !name,\n    'resource': (resource: string) => !resourceTypes[resource],\n});\n\nexport const getResourceErrors = (resource: any) => {\n    var errors: any = {};\n    for (const field in fieldErrors) {\n        if (fieldErrors.hasOwnProperty(field) && fieldErrors[field](resource[field])) {\n            errors[field] = 'invalid';\n        }\n    }\n    if (allFieldsEqualBool(resource, counties, false)) {\n        errors.counties = 'At least one county must be served';\n    }\n    return errors;\n};\n","import React from 'react';\n\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\n\nimport { allFieldsEqualBool, setAllFields } from 'util/Resource';\nimport * as options from 'constants/Options.json';\n\nconst countyNames = options.county;\nconst counties = Object.keys(countyNames);\nconst resourceTypes = options.resource;\n\nconst makeOptions = (options: any) => Object.keys(options).map(option => (\n    <FormControlLabel value={option} control={<Radio color=\"primary\" />} label={options[option]} key={option} />\n));\nconst makeCheckboxes = (\n    resource: any,\n    names: any,\n    handleChecked: (field: string) => (event: React.ChangeEvent<HTMLInputElement>) => void\n) => Object.keys(names).map(field => (\n    <FormControlLabel\n        control={<Checkbox color=\"primary\" checked={!!resource[field]} onChange={handleChecked(field)} />}\n        label={names[field]}\n        key={field}\n    />\n));\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    formControl: {\n      margin: theme.spacing(1),\n    },\n  }),\n);\n\ninterface ResourceFormProps {\n    resource: any;\n    setResource: (resource: any) => void;\n    errors: any;\n};\n\nexport const ResourceForm = function(props: ResourceFormProps) {\n    const classes = useStyles();\n    const { setResource, resource, errors } = props;\n    const handleChange = (field: string) => (event: any) => {\n        setResource({ ...resource, [field]: event.target.value });\n    };\n    const handleChecked = (field: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n        setResource({ ...resource, [field]: event.target.checked ? 1 : 0 });\n    };\n    const checkAllCounties = (event: React.ChangeEvent<HTMLInputElement>) => setAllFields(\n        resource,\n        setResource,\n        counties,\n        event.target.checked ? 1 : 0\n    );\n    return (\n        <>\n            <FormControl\n                required\n                error={!!errors.provider_name}\n                variant=\"outlined\"\n                fullWidth\n                className={classes.formControl}\n            >\n                <InputLabel htmlFor=\"provider-name\">Provider Name</InputLabel>\n                <OutlinedInput\n                    id=\"provider-name\"\n                    value={resource.provider_name || ''}\n                    onChange={handleChange('provider_name')}\n                    label=\"Provider Name\"\n                />\n            </FormControl>\n            <FormControl\n                component=\"fieldset\"\n                required\n                error={!!errors.resource}\n                fullWidth\n                className={classes.formControl}\n            >\n                <FormLabel component=\"legend\">Resource Type</FormLabel>\n                <RadioGroup\n                    aria-label=\"resource-type\"\n                    name=\"resource-type\"\n                    value={resource.resource || ''}\n                    onChange={handleChange('resource')}\n                >\n                    {makeOptions(resourceTypes)}\n                </RadioGroup>\n            </FormControl>\n            <FormControl\n                fullWidth\n                component=\"fieldset\"\n                required\n                error={!!errors.counties}\n                className={classes.formControl}\n            >\n                <FormLabel component=\"legend\">Counties Served</FormLabel>\n                <FormGroup row>\n                    {makeCheckboxes(resource, countyNames, handleChecked)}\n                </FormGroup>\n                <FormControlLabel\n                    control={(\n                        <Checkbox\n                            color=\"primary\"\n                            checked={allFieldsEqualBool(resource, counties, true)}\n                            indeterminate={\n                                !allFieldsEqualBool(resource, counties, true) &&\n                                !allFieldsEqualBool(resource, counties, false)\n                            }\n                            onChange={checkAllCounties}\n                        />\n                    )}\n                    label=\"All\"\n                />\n            </FormControl>\n            <FormControl variant=\"outlined\" fullWidth className={classes.formControl}>\n                <InputLabel htmlFor=\"address\">Address</InputLabel>\n                <OutlinedInput\n                    id=\"address\"\n                    value={resource.address || ''}\n                    onChange={handleChange('address')}\n                    label=\"Address\"\n                />\n            </FormControl>\n            <FormControl className={classes.formControl}>\n                <FormControlLabel\n                    control={<Checkbox color=\"primary\" checked={!!resource.bob} onChange={handleChecked('bob')} />}\n                    label=\"Black-Owned\"\n                />\n            </FormControl>\n        </>\n    );\n}\n\nexport default ResourceForm;\n","import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport ResourceForm from './ResourceForm';\nimport { getResourceErrors } from 'util/Resource';\n\ninterface AddEditDialogProps {\n    title: string;\n    description: string;\n    isOpen: boolean;\n    setOpen: (isOpen: boolean) => void;\n    resource: any;\n    setResource: (resource: any) => void;\n    submitHandler: (resource: any) => void;\n};\n\nexport const AddEditDialog = (props: AddEditDialogProps) => {\n    const { title, description, isOpen, setOpen, resource, setResource, submitHandler } = props;\n    const errors = getResourceErrors(resource);\n    const hasErrors = () => {\n        for (var prop in errors) {\n            return true;\n        }\n        return false;\n    }\n\n    const handleClose = () => setOpen(false);\n    const handleSubmit = (event: React.MouseEvent<HTMLElement>) => {\n        if (!hasErrors()) {\n            submitHandler(resource);\n            setResource({} as any);\n            handleClose();\n        }\n    }\n\n    return (\n        <div>\n            <Dialog\n                maxWidth=\"lg\"\n                open={isOpen}\n                onClose={handleClose}\n                aria-labelledby=\"dialog-title\"\n            >\n                <DialogTitle id=\"dialog-title\">{title}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{description}</DialogContentText>\n                    <ResourceForm resource={resource} setResource={setResource} errors={errors}/>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"secondary\">\n                        Cancel\n                    </Button>\n                    <Button onClick={handleSubmit} variant=\"contained\" color=\"primary\" disabled={hasErrors()}>\n                        Submit\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n}\n\nexport default AddEditDialog;\n","import React, { useState } from 'react';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AddBoxIcon from '@material-ui/icons/AddBox';\n\nimport { AddEditDialog } from './AddEditDialog';\n\nconst initialResource: any = {\"resource\": \"invalid\"};\n\ninterface NewResourceProps {\n    newResourceHandler: (resource: any) => void;\n};\n\nconst NewResourceButton = (props: NewResourceProps) => {\n    const { newResourceHandler } = props;\n    const [resource, setResource] = useState(initialResource);\n    const [isOpen, setOpen] = React.useState(false);\n    const handleClickOpen = () => setOpen(true);\n\n    return (\n        <div>\n            <Tooltip title=\"New Resource\">\n                <IconButton aria-label=\"New Resource\" onClick={handleClickOpen}>\n                    <AddBoxIcon />\n                </IconButton>\n            </Tooltip>\n            <AddEditDialog\n                title=\"New Resource\"\n                description=\"Add a resource to the community map.\"\n                isOpen={isOpen}\n                setOpen={setOpen}\n                resource={resource}\n                setResource={setResource}\n                submitHandler={newResourceHandler}\n            />\n        </div>\n    )\n}\n\nexport default NewResourceButton;\n","import React from 'react';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport SearchIcon from '@material-ui/icons/Search';\n\ninterface SearchProps {\n    onSearchChange: (value: string) => void;\n    globalFilter: any;\n};\n\nconst Search = (props: SearchProps) => {\n    const { onSearchChange, globalFilter } = props;\n    return (\n        <TextField\n            value={globalFilter || ''}\n            onChange={(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n                onSearchChange(event.target.value);\n            }}\n            placeholder=\"Search...\"\n            InputProps={{\n                startAdornment: (\n                    <InputAdornment position=\"start\">\n                        <Tooltip title=\"Search\">\n                            <SearchIcon fontSize=\"small\" />\n                        </Tooltip>\n                    </InputAdornment>\n                ),\n                endAdornment: (\n                    <InputAdornment position=\"end\">\n                        <IconButton\n                            disabled={!globalFilter}\n                            onClick={() => onSearchChange(\"\")}\n                        >\n                            <ClearIcon fontSize=\"small\" />\n                        </IconButton>\n                    </InputAdornment>\n                ),\n                inputProps: { 'aria-label': \"Search\" },\n            }}\n        />\n    );\n};\n\nexport default Search;\n","import React from 'react';\n\nimport clsx from 'clsx';\nimport { createStyles, lighten, makeStyles, Theme } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport NewResourceButton from './NewResourceButton';\nimport Search from './Search';\n\nconst useToolbarStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            paddingLeft: theme.spacing(2),\n            paddingRight: theme.spacing(1),\n        },\n        highlight:\n            theme.palette.type === 'light'\n                ? {\n                    color: theme.palette.secondary.main,\n                    backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n                  }\n                : {\n                    color: theme.palette.text.primary,\n                    backgroundColor: theme.palette.secondary.dark,\n                  },\n        title: {\n            flex: '1 1 100%',\n        },\n    }),\n);\n\ninterface TableToolbarProps {\n    numSelected: number;\n    globalFilter: any;\n    setGlobalFilter: (filterValue: any) => void;\n    newResourceHandler: (resource: any) => void;\n    deleteHandler: (event: React.MouseEvent<HTMLElement>) => void;\n}\n\nconst TableToolbar = (props: TableToolbarProps) => {\n    const classes = useToolbarStyles();\n    const { numSelected, globalFilter, setGlobalFilter, newResourceHandler, deleteHandler } = props;\n    const selected = numSelected > 0;\n    const onSearchChange = (value: string) => setGlobalFilter(value);\n\n    return (\n        <Toolbar\n            className={clsx(classes.root, {\n                [classes.highlight]: selected,\n            })}\n        >\n            {selected ? (\n                <Typography className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n                    {numSelected} selected\n                </Typography>\n            ) : (\n                <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n                    Drafts (Fake Data For Demo)\n                </Typography>\n            )}\n            {selected ? (\n                <Tooltip title=\"Delete\">\n                    <IconButton aria-label=\"delete\" onClick={deleteHandler}>\n                        <DeleteIcon />\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <>\n                    <Search onSearchChange={onSearchChange} globalFilter={globalFilter}/>\n                    <NewResourceButton newResourceHandler={newResourceHandler}/>\n                </>\n            )}\n        </Toolbar>\n    );\n};\n\nexport default TableToolbar;\n","import React, { useState } from 'react';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport EditIcon from '@material-ui/icons/Edit';\n\nimport { AddEditDialog } from './AddEditDialog';\n\n\ninterface EditButtonProps {\n    originalResource: any;\n    updateRow: (rowIndex: number, value: any) => void;\n    rowIndex: number;\n};\n\nconst EditButton = (props: EditButtonProps) => {\n    const { originalResource, updateRow, rowIndex } = props;\n    const [resource, setResource] = useState(originalResource);\n    const [isOpen, setOpen] = React.useState(false);\n    const handleClickOpen = () => setOpen(true);\n    const editHandler = (resource: any) => updateRow(rowIndex, resource);\n\n    return (\n        <div>\n            <Tooltip title=\"Edit Resource\">\n                <IconButton aria-label=\"Edit Resource\" onClick={handleClickOpen}>\n                    <EditIcon />\n                </IconButton>\n            </Tooltip>\n            <AddEditDialog\n                title=\"Edit Resource\"\n                description=\"Editing an existing resource or draft of resource.\"\n                isOpen={isOpen}\n                setOpen={setOpen}\n                resource={resource}\n                setResource={setResource}\n                submitHandler={editHandler}\n            />\n        </div>\n    )\n}\n\nexport default EditButton;\n","import React from 'react';\n\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { Row } from 'react-table';\n\nimport EditButton from './EditButton';\n\ninterface EditButtonCellProps {\n    row: Row<Object>;\n    updateRow: (rowIndex: number, value: any) => void;\n};\n\nexport const actionsColumn = {\n    id: 'selection',\n    Header: ({ getToggleAllRowsSelectedProps } : { getToggleAllRowsSelectedProps: any }) => (\n        <div>\n            <Checkbox {...getToggleAllRowsSelectedProps()} color=\"primary\" />\n        </div>\n    ),\n    Cell: ({ row, updateRow } : EditButtonCellProps) => (\n        <div style={{ display: \"flex\", flexDirection: \"row\" as \"row\" }}>\n            <Checkbox {...row.getToggleRowSelectedProps()} color=\"primary\" />\n            <EditButton originalResource={row.original} updateRow={updateRow} rowIndex={row.index} />\n        </div>\n    ),\n};\n\nexport const dataColumns = [\n    { Header: \"Provider Name\", accessor: \"provider_name\" },\n    { Header: \"Resource\", accessor: \"resource\" },\n    // { Header: \"Region\", accessor: \"region\" },\n    { Header: \"Address\", accessor: \"address\" },\n    // { Header: \"ZIP\", accessor: \"zip\" },\n    // { Header: \"Status\", accessor: \"status\" },\n    // { Header: \"Free\", accessor: \"free\" }\n    { Header: \"Alameda\", accessor: \"alameda\" },\n    { Header: \"Santa Clara\", accessor: \"santa_clara\" },\n    { Header: \"San Mateo\", accessor: \"san_mateo\" },\n    { Header: \"Contra Costa\", accessor: \"contra_costa\" },\n    { Header: \"Marin\", accessor: \"marin\" },\n    { Header: \"Monterey\", accessor: \"monterey\" },\n    { Header: \"Sonoma\", accessor: \"sonoma\" },\n    { Header: \"Solano\", accessor: \"solano\" },\n    { Header: \"Napa\", accessor: \"napa\" },\n    { Header: \"San Francisco\", accessor: \"san_francisco\" },\n    { Header: \"Black-Owned\", accessor: \"bob\" },\n    { Header: \"Last Updated\", accessor: \"last_update\" },\n];\n","import React from 'react';\n\nimport { Column } from 'react-table';\n\nimport { fieldErrors } from 'util/Resource';\n\ninterface ErrorCellProps {\n    value: any;\n    column: Column<Object>;\n};\n\nconst ErrorCell = (props: ErrorCellProps) => {\n    const { value, column } = props;\n    const hasErrors = column.id && fieldErrors[column.id!] && fieldErrors[column.id!](value);\n\n    return hasErrors ? <div style={{ 'backgroundColor': '#ffe2ec' }}>{value}</div> : value;\n};\n\nexport default ErrorCell;\n","import React from 'react';\n\nimport MaUTable from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport { useGlobalFilter, usePagination, useRowSelect, useSortBy, useTable, Column } from 'react-table';\n\nimport TablePaginationActions from './TablePaginationActions';\nimport TableToolbar from './TableToolbar';\nimport { actionsColumn } from './Columns';\nimport ErrorCell from './ErrorCell';\n\ninterface TableProps {\n    columns: Column<Object>[];\n    data: Object[];\n    setData: (data: any[]) => void;\n    updateRow: (rowIndex: number, value: any) => void;\n};\n\nconst Table = (props: TableProps) => {\n    const { data, setData, columns, updateRow } = props;\n    const defaultColumn = { Cell: ErrorCell };\n    const {\n        getTableProps,\n        headerGroups,\n        prepareRow,\n        rows,\n        page,\n        gotoPage,\n        setPageSize,\n        setGlobalFilter,\n        state: { pageIndex, pageSize, selectedRowIds, globalFilter },\n    } = useTable(\n        { columns, data, defaultColumn, updateRow },\n        useGlobalFilter,\n        useSortBy,\n        usePagination,\n        useRowSelect,\n        hooks => hooks.allColumns.push(columns => [actionsColumn, ...columns]),\n    );\n\n    const handleChangePage = (event: any, newPage: number) => gotoPage(newPage);\n    const handleChangeRowsPerPage = (event: any) => setPageSize(Number(event.target.value));\n    const newResourceHandler = (resource: any) => setData(data.concat([resource]));\n    const removeByIndexs = (array: Object[], indexs: number[]) => array.filter((_, i) => !indexs.includes(i));\n    const deleteHandler = (event: React.MouseEvent<HTMLElement>) => {\n        const newData = removeByIndexs(\n            data,\n            Object.keys(selectedRowIds).map(x => parseInt(x, 10)),\n        );\n        setData(newData);\n    };\n\n    return (\n        <>\n            <TableToolbar\n                numSelected={Object.keys(selectedRowIds).length}\n                globalFilter={globalFilter}\n                setGlobalFilter={setGlobalFilter}\n                newResourceHandler={newResourceHandler}\n                deleteHandler={deleteHandler}\n            />\n            <TableContainer>\n                <MaUTable {...getTableProps()} stickyHeader size=\"small\">\n                    <TableHead>\n                        {headerGroups.map(headerGroup => (\n                            <TableRow {...headerGroup.getHeaderGroupProps()}>\n                                {headerGroup.headers.map(column => (\n                                    <TableCell\n                                        {...(column.id === 'selection'\n                                            ? column.getHeaderProps()\n                                            : column.getHeaderProps(column.getSortByToggleProps()))}\n                                    >\n                                        {column.render('Header')}\n                                        {column.id !== 'selection' ? (\n                                            <TableSortLabel\n                                                active={column.isSorted}\n                                                direction={column.isSortedDesc ? 'desc' : 'asc'}\n                                            />\n                                        ) : null}\n                                    </TableCell>\n                                ))}\n                            </TableRow>\n                        ))}\n                    </TableHead>\n                    <TableBody>\n                        {page.map(row => {\n                            prepareRow(row);\n                            return (\n                                <TableRow {...row.getRowProps()}>\n                                    {row.cells.map(cell => {\n                                        return (\n                                            <TableCell {...cell.getCellProps()}>\n                                                {cell.render('Cell')}\n                                            </TableCell>\n                                        )\n                                    })}\n                                </TableRow>\n                            )\n                        })}\n                    </TableBody>\n                    <TableFooter>\n                        <TableRow>\n                            <TablePagination\n                                rowsPerPageOptions={[\n                                    ...([5, 10, 25, 50, 100].filter((x: number) => (x < data.length))),\n                                    { label: 'All', value: data.length },\n                                ]}\n                                count={rows.length}\n                                rowsPerPage={pageSize}\n                                page={pageIndex}\n                                SelectProps={{\n                                    inputProps: { 'aria-label': 'rows per page' },\n                                    native: true,\n                                }}\n                                onChangePage={handleChangePage}\n                                onChangeRowsPerPage={handleChangeRowsPerPage}\n                                ActionsComponent={TablePaginationActions}\n                            />\n                        </TableRow>\n                    </TableFooter>\n                </MaUTable>\n            </TableContainer>\n        </>\n    );\n};\n\nexport default Table;\n","import React from 'react';\n\nimport Box from '@material-ui/core/Box'\nimport { Column } from 'react-table';\n\nimport Table from 'components/table/Table';\nimport { dataColumns } from 'components/table/Columns';\nimport * as results from 'constants/Meals.json';\n\nfunction App() {\n    const [data, setData] = React.useState(results.rows);\n    const columns = React.useMemo(() => dataColumns as Column<Object>[], []);\n    const updateRow = (rowIndex: number, value: any) => setData(\n        old => old.map((row, index) => (index === rowIndex ? value : row))\n    );\n    const appStyle = {\n        height: \"100%\",\n        width: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\" as \"column\",\n    };\n    return (\n        <Box style={appStyle}>\n            <Table\n                data={data}\n                setData={setData}\n                columns={columns}\n                updateRow={updateRow}\n            />\n        </Box>\n    );;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.css';\nimport App from 'App';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}